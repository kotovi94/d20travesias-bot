require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } = require('@discordjs/voice');
const { spawn } = require('child_process');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

const prefix = "!";
const queue = new Map(); // üéµ Cola de reproducci√≥n global

// üîÑ Funci√≥n para elegir una respuesta aleatoria
function getRandomResponse(responses) {
    return responses[Math.floor(Math.random() * responses.length)];
}

// üé≠ Mensaje de inicio
client.once('ready', async () => {
    console.log(`üé≠ El bardo ${client.user.tag} est√° listo para tocar!`);
});

// üé§ Conectar el bot al canal de voz y manejar la cola de m√∫sica
client.on('messageCreate', async message => {
    if (!message.content.startsWith(prefix) || message.author.bot) return;
    if (!message.member.voice.channel) return message.reply("‚ö†Ô∏è ¬°Debes estar en un canal de voz para usar los comandos de m√∫sica!");

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift()?.toLowerCase();
    const guildId = message.guild.id;
    const voiceChannel = message.member.voice.channel;
    let serverQueue = queue.get(guildId);

    // üîä Conectar el bot al canal de voz
    if (command === 'join') {
        if (!serverQueue) {
            serverQueue = {
                songs: [],
                connection: joinVoiceChannel({
                    channelId: voiceChannel.id,
                    guildId: guildId,
                    adapterCreator: message.guild.voiceAdapterCreator
                }),
                player: createAudioPlayer()
            };
            queue.set(guildId, serverQueue);
            serverQueue.connection.subscribe(serverQueue.player);
        }

        const joinResponses = [
            "üéª ¬°Que resuenen las cuerdas y el esp√≠ritu se eleve! ¬°Estoy listo para tocar!",
            "üìØ ¬°El bardo ha llegado! Preparad vuestros o√≠dos para canciones √©picas.",
            "üé∂ Entra el trovador, listo para llenar este lugar de armon√≠as m√°gicas."
        ];
        message.reply(getRandomResponse(joinResponses));
    }

    // üéµ A√±adir canci√≥n a la cola y reproducir si no hay nada sonando
    if (command === 'play') {
        if (!serverQueue || !serverQueue.connection) return message.reply("üé≠ ¬°Oh, noble alma! Primero deb√©is invitarme con `!join`.");
        if (!args[0]) return message.reply("üìú ¬°Un bardo necesita su partitura! Proporci√≥name un enlace de YouTube.");

        const url = args[0].split("&")[0];
        serverQueue.songs.push(url);

        if (serverQueue.player.state.status !== AudioPlayerStatus.Playing) {
            playSong(guildId);
        }

        const playResponses = [
            "üéº ¬°Ah, esta melod√≠a promete ser legendaria!",
            "üé∂ ¬°Una nueva canci√≥n para los anales de la historia!",
            "üéª ¬°Que comience el concierto! La m√∫sica nos guiar√°."
        ];
        message.reply(getRandomResponse(playResponses));
    }

    // ‚è∏Ô∏è Pausar la m√∫sica
    if (command === 'pause') {
        if (!serverQueue || !serverQueue.player) return message.reply("‚ö†Ô∏è ¬°No hay melod√≠a en el aire para pausar!");
        serverQueue.player.pause();

        const pauseResponses = [
            "‚è∏Ô∏è ¬°Ah, un momento de respiro! Pero la m√∫sica volver√°.",
            "üéº ¬°El trovador se toma un descanso, mas la historia no ha acabado!",
            "üìú ¬°La sinfon√≠a espera! Pausando esta pieza con gracia."
        ];
        message.reply(getRandomResponse(pauseResponses));
    }

    // ‚ñ∂Ô∏è Reanudar la m√∫sica
    if (command === 'resume') {
        if (!serverQueue || !serverQueue.player) return message.reply("üìú ¬°No hay canci√≥n en espera para continuar!");
        serverQueue.player.unpause();

        const resumeResponses = [
            "‚ñ∂Ô∏è ¬°La m√∫sica regresa, como un h√©roe de leyenda!",
            "üé∂ ¬°El la√∫d vuelve a sonar! Preparaos para la siguiente estrofa.",
            "üéª ¬°Que la melod√≠a siga! No hay descanso para un bardo."
        ];
        message.reply(getRandomResponse(resumeResponses));
    }

    // ‚è≠Ô∏è Saltar a la siguiente canci√≥n en la cola
    if (command === 'skip') {
        if (!serverQueue || serverQueue.songs.length === 0) return message.reply("‚è≠Ô∏è ¬°No hay canci√≥n que saltar!");

        serverQueue.songs.shift();
        if (serverQueue.songs.length === 0) {
            serverQueue.songs.push(serverQueue.songs[0]);
        }
        serverQueue.player.stop();

        const skipResponses = [
            "‚è≠Ô∏è ¬°Adelante con la pr√≥xima balada! Este cuento debe continuar.",
            "üé≠ ¬°Saltamos esta historia para llegar a un nuevo acto!",
            "üéº ¬°Siguiente canci√≥n! Que el fest√≠n de sonidos no termine."
        ];
        message.reply(getRandomResponse(skipResponses));
    }

    // üõë Detener la m√∫sica y limpiar la cola
    if (command === 'stop') {
        if (!serverQueue) return message.reply("üé≠ ¬°No hay nada que detener!");

        serverQueue.songs = [];
        serverQueue.player.stop();

        const stopResponses = [
            "üõë ¬°El silencio cae como un tel√≥n en esta taberna!",
            "üé≠ ¬°La canci√≥n ha terminado, pero la historia contin√∫a!",
            "üéª Deteniendo la m√∫sica... hasta que alguien pida otra ronda."
        ];
        message.reply(getRandomResponse(stopResponses));
    }

    // üö™ Desconectar el bot del canal de voz
    if (command === 'leave') {
        if (!serverQueue || !serverQueue.connection) return message.reply("‚ö†Ô∏è No puedo salir de donde nunca estuve.");

        serverQueue.connection.destroy();
        queue.delete(guildId);

        const leaveResponses = [
            "üëã ¬°El bardo se retira, pero volver√° cuando la historia lo requiera!",
            "üé≠ ¬°Mi acto ha terminado! Que las melod√≠as os acompa√±en hasta la pr√≥xima.",
            "üìØ ¬°El trovador parte en busca de nuevas canciones y viejas leyendas!"
        ];
        message.reply(getRandomResponse(leaveResponses));
    }
});

// üéµ Funci√≥n para reproducir una canci√≥n correctamente en loop
async function playSong(guildId) {
    const serverQueue = queue.get(guildId);
    if (!serverQueue || serverQueue.songs.length === 0) return;

    const songUrl = serverQueue.songs[0];

    try {
        const process = spawn('yt-dlp', ['-f', 'bestaudio', '--no-playlist', '-o', '-', songUrl], { stdio: ['ignore', 'pipe', 'ignore'] });
        const resource = createAudioResource(process.stdout);
        serverQueue.player.play(resource);
        serverQueue.connection.subscribe(serverQueue.player);

        serverQueue.player.once(AudioPlayerStatus.Idle, () => {
            process.kill();

            if (serverQueue.songs.length > 1) {
                serverQueue.songs.push(serverQueue.songs.shift());
            }

            playSong(guildId);
        });

    } catch (error) {
        console.error(`‚ùå Error al reproducir: ${error.message}`);
    }
}

const CANAL_ORIGEN_ID = "1348784767629262921"; // üè∞ Canal donde los DMs escriben misiones
const CANAL_DESTINO_ID = "1181356950211022988"; // üî• Canal donde se publican las misiones
const DM_ROLE_ID = "1181336808907362405"; // üé≠ Rol del DM
const ROLES_MENCIONAR = ["1181336919087530074", "1181337096343011451"]; // üé≠ Roles a etiquetar

// Mensajes de introducci√≥n aleatorios
const MENSAJES_PUBLICACION = [
    "üìú ¬°Una nueva misi√≥n ha sido publicada! Todo aquel valiente capaz de superar las pruebas ser√° bienvenido. ‚öîÔ∏è",
    "üó∫Ô∏è Se ha registrado una nueva expedici√≥n, ¬øqui√©n se atreve a emprender esta aventura?",
    "üîÆ Los destinos han sido revelados, y una nueva historia est√° por escribirse.",
    "‚ö° ¬°Atenci√≥n aventureros! Un nuevo desaf√≠o aguarda a aquellos lo suficientemente valientes para enfrentarlo."
];

// Escuchar mensajes para el comando !quest
client.on('messageCreate', async message => {
    if (!message.content.startsWith(prefix) || message.author.bot) return;
    
    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift()?.toLowerCase();
    
    if (command === "quest") {
        // Verificar que est√° en el canal correcto
        if (message.channel.id !== CANAL_ORIGEN_ID) return message.reply("‚ö†Ô∏è Solo puedes escribir misiones en el canal designado.");

        // Verificar si el usuario tiene el rol de DM
        if (!message.member.roles.cache.has(DM_ROLE_ID)) return message.reply("‚ö†Ô∏è Solo los DMs pueden publicar misiones.");

        message.reply("üìú Escribe la misi√≥n en el siguiente mensaje. **Tienes 10 minutos** para escribirla antes de que el tiempo expire.");

        // Esperar el siguiente mensaje del DM
        const filter = response => response.author.id === message.author.id && response.channel.id === CANAL_ORIGEN_ID;
        const collected = await message.channel.awaitMessages({ filter, max: 1, time: 600000, errors: ["time"] }).catch(() => null);
        
        if (!collected) {
            return message.reply("‚è≥ **Tiempo agotado.** No se ha publicado ninguna misi√≥n. Escribe `!quest` de nuevo si deseas intentarlo.");
        }

        const missionMessage = collected.first();
        const missionText = missionMessage.content;

        const canalDestino = await client.channels.fetch(CANAL_DESTINO_ID);
        if (!canalDestino) return message.reply("‚ö†Ô∏è No puedo encontrar el canal de misiones.");

        // Buscar enlaces en el mensaje
        const linkRegex = /(https?:\/\/[^\s]+)/g;
        const enlaces = missionText.match(linkRegex);
        const mensajeEnlaces = enlaces ? `üîó **Enlaces:** ${enlaces.join(" ")}` : "";

        // Crear la menci√≥n de roles
        const rolesMencionados = ROLES_MENCIONAR.map(id => `<@&${id}>`).join(" ");

        // Seleccionar un mensaje aleatorio
        const mensajeIntro = MENSAJES_PUBLICACION[Math.floor(Math.random() * MENSAJES_PUBLICACION.length)];

        // Construir el mensaje final
        const mensajeFinal = `${mensajeIntro}\n\nüìú **Misi√≥n publicada por <@${message.author.id}> (DM):**\n${missionText}\n\n${mensajeEnlaces}\n\nüé≠ ${rolesMencionados}`;

        // Enviar la misi√≥n al canal de destino
        await canalDestino.send(mensajeFinal);

        // Confirmaci√≥n al DM
        message.reply("‚úÖ **¬°Tu misi√≥n ha sido publicada en el tabl√≥n de anuncios!**");
    }
});

// üîë Iniciar bot
client.login(process.env.TOKEN);
